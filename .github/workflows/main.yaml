# This is based on
# <https://github.com/ongardie/cubicle/blob/b307fe9/.github/workflows/main.yaml>
# with Diego's permission.  The initial workflow YAML skeleton before that was
# based on
# <https://github.com/actions-rs/example/blob/master/.github/workflows/quickstart.yml>
# and
# <https://github.com/ramosbugs/oauth2-rs/blob/main/.github/workflows/main.yml>.
#
# GitHub Actions workflow syntax documentation is here:
# <https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions>.
name: CI

on:
  pull_request: {}
  push:
    branches:
    - main
  workflow_dispatch: {}


jobs:
  swift-package:
    name: Swift Package
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Show cargo package versions before cache unpack
      run: cargo install --list && cbindgen -V && which cbindgen

    - name: Install Rust stable toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Show cargo package versions before cache unpack
      run: cargo install --list && cbindgen -V && which cbindgen

    - name: Use Rust Cache
      uses: Swatinem/rust-cache@v2

    - name: Show cached cargo package versions
      run: cargo install --list && cbindgen -V && which cbindgen

    - name: Install cbindgen
      run: cargo +stable install cbindgen --version 0.24.3 --force

    - name: Show cargo package versions
      run: cargo install --list && cbindgen -V && which cbindgen

    - name: Build juicebox-sdk-ffi
      run: swift/ffi.sh --debug --verbose --verify

    - name: Build and Test
      run: swift test -v
      working-directory: swift

    - name: Show cargo package versions after tests
      run: cargo install --list && cbindgen -V && which cbindgen

  swift-pod:
    name: Swift Pod
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v3

      - name: Lint
        run: swiftlint lint --strict --reporter github-actions-logging
        working-directory: swift

      - run: rustup toolchain install stable --profile minimal --target x86_64-apple-ios,aarch64-apple-ios,aarch64-apple-ios-sim

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Run pod lint
        run: pod lib lint --verbose

  rust:
    name: Rust
    runs-on: ubuntu-20.04
    steps:

      - uses: actions/checkout@v3

      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt, clippy
          override: 'true'
          profile: minimal
          toolchain: stable

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          args: --workspace --exclude juicebox-sdk-demo
          command: test
        env:
          RUST_BACKTRACE: '1'

      - name: Run util tests
        uses: actions-rs/cargo@v1
        with:
          args: -p juicebox-sdk-util --all-features
          command: test
        env:
          RUST_BACKTRACE: '1'

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          args: --all -- --check
          command: fmt

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          args: --workspace --exclude juicebox-sdk-demo --tests -- -D warnings
          command: clippy

      - name: Install cargo audit
        uses: actions-rs/cargo@v1
        with:
          args: cargo-audit
          command: install

      - name: Run cargo audit
        uses: actions-rs/cargo@v1
        with:
          command: audit

      - name: Install nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2023-05-01
          components: rust-src

      - name: Build no_std
        uses: actions-rs/cargo@v1
        with:
          toolchain: nightly-2023-05-01
          args: -p juicebox-sdk-core -p juicebox-sdk-marshalling -p juicebox-sdk-noise -Z build-std=core,alloc --target x86_64-unknown-linux-gnu
          command: build

  jni:
    name: Android
    runs-on: ubuntu-20.04
    steps:

      - uses: actions/checkout@v3

      - run: rustup toolchain install stable --profile minimal --target aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'adopt'
          cache: 'gradle'

      - name: Build Android
        run: ./gradlew build
        working-directory: android

  wasm:
    name: Wasm
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt, clippy
          override: 'true'
          profile: minimal
          toolchain: stable

      - name: Use Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - uses: jetli/wasm-pack-action@v0.4.0

      - name: Run Tests
        run: WASM_BINDGEN_TEST_TIMEOUT=60 wasm-pack test --firefox --headless rust/bridge/wasm

plugins {
    id 'com.android.library' version '7.4.2'
    id 'org.jetbrains.kotlin.android' version '1.8.0'
    id 'org.jetbrains.dokka' version '1.6.0'
    id 'maven-publish'
    id 'signing'
}

repositories {
    google()
    mavenCentral()
    mavenLocal()
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 24
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildTypes {
        debug {
            debuggable true
        }
    }

    sourceSets {
        main {
            main.jniLibs.srcDirs = ['libs']
        }
    }
}

tasks.named("dokkaHtml") {
    moduleName.set("juicebox-sdk")
    dokkaSourceSets.named("main") {
        perPackageOption {
            matchingRegex.set(".*\\.internal.*")
            suppress.set(true)
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'org.assertj:assertj-core:3.11.1'
}

preBuild {
    dependsOn 'buildRustJni'
}

def getVersionName() {
    try {
        return hasProperty('versionString') ? versionString : 'git describe --tags --exact-match'.execute().text.trim()
    } catch (Exception e) {
        throw new GradleException("Git tag not found. Please make sure you have tagged your commit.")
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def getRepositoryUrl() {
    return hasProperty('ossrhRepo') ? ossrhRepo
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getRepositoryUsername() {
    return hasProperty('ossrhUsername') ? ossrhUsername : ''
}

def getRepositoryPassword() {
    return hasProperty('ossrhPassword') ? ossrhPassword : ''
}

def getGpgSigningKey() {
    return hasProperty('signingKey') ? signingKey : ''
}

def getGpgSigningPassword() {
    return hasProperty('signingPassword') ? signingPassword : ''
}

afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.release
                groupId = 'xyz.juicebox'
                artifactId = 'sdk'
                version getVersionName()

                pom {
                    name = 'sdk'
                    packaging = 'aar'
                    description = 'Juicebox SDK for Android'
                    url = 'https://github.com/juicebox-systems/juicebox-sdk'

                    scm {
                        url = 'https://github.com/juicebox-systems/juicebox-sdk/'
                        connection = 'scm:git@github.com:juicebox-systems/juicebox-sdk.git'
                        developerConnection = 'scm:git@github.com:juicebox-systems/juicebox-sdk.git'
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = "https://github.com/juicebox-systems/juicebox-sdk/blob/$version/LICENSE"
                        }
                    }

                    developers {
                        developer {
                            name = 'Juicebox Systems, Inc.'
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                url = getRepositoryUrl()
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask(":android:publish") }
        useInMemoryPgpKeys(getGpgSigningKey(), getGpgSigningPassword())
        sign publishing.publications.mavenJava
    }
}

task buildRustJni(type:Exec) {
  group 'Rust'
  description 'Build the Rust JNI libraries'

  commandLine 'bash', 'jni.sh'
}

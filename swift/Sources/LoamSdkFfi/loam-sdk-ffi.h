#ifndef LOAM_FFI_H_
#define LOAM_FFI_H_

/* This file was automatically generated by cbindgen */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum {
  LoamClientCreateErrorNone = 0,
  LoamClientCreateErrorInvalidConfiguration,
  LoamClientCreateErrorInvalidAuthToken,
} LoamClientCreateError;

typedef enum {
  LoamDeleteErrorNullClient = 0,
  LoamDeleteErrorInvalidAuth,
  LoamDeleteErrorNetworkError,
  LoamDeleteErrorProtocolError,
} LoamDeleteError;

typedef enum {
  LoamHttpRequestMethodGet = 0,
  LoamHttpRequestMethodPut,
  LoamHttpRequestMethodPost,
  LoamHttpRequestMethodDelete,
} LoamHttpRequestMethod;

typedef enum {
  LoamRecoverErrorNullClient = 0,
  LoamRecoverErrorNullPin,
  LoamRecoverErrorInvalidAuth,
  LoamRecoverErrorNetworkError,
  LoamRecoverErrorUnsuccessful,
  LoamRecoverErrorProtocolError,
} LoamRecoverError;

typedef enum {
  LoamRegisterErrorNullClient = 0,
  LoamRegisterErrorNullPin,
  LoamRegisterErrorNullSecret,
  LoamRegisterErrorInvalidAuth,
  LoamRegisterErrorNetworkError,
  LoamRegisterErrorProtocolError,
  LoamRegisterErrorUnavailable,
} LoamRegisterError;

/**
 * Used to register and recover PIN-protected secrets on behalf of a
 * particular user.
 */
typedef struct LoamClient LoamClient;

typedef struct LoamHttpClient LoamHttpClient;

typedef struct {
  const uint8_t *data;
  size_t length;
} LoamUnmanagedDataBuffer;

typedef struct {
  uint8_t id[16];
  const char *address;
  LoamUnmanagedDataBuffer public_key;
} LoamRealm;

typedef struct {
  const LoamRealm *data;
  size_t length;
} LoamUnmanagedRealmBuffer;

typedef struct {
  LoamUnmanagedRealmBuffer realms;
  uint8_t register_threshold;
  uint8_t recover_threshold;
} LoamConfiguration;

typedef struct {
  const char *tenant;
  const char *user;
  LoamUnmanagedDataBuffer signature;
} LoamAuthToken;

typedef struct {
  const char *name;
  const char *value;
} LoamHttpHeader;

typedef struct {
  const LoamHttpHeader *data;
  size_t length;
} LoamUnmanagedHttpHeaderBuffer;

typedef struct {
  uint8_t id[16];
  LoamHttpRequestMethod method;
  const char *url;
  LoamUnmanagedHttpHeaderBuffer headers;
  LoamUnmanagedDataBuffer body;
} LoamHttpRequest;

typedef struct {
  uint8_t id[16];
  uint16_t status_code;
  LoamUnmanagedHttpHeaderBuffer headers;
  LoamUnmanagedDataBuffer body;
} LoamHttpResponse;

typedef void (*LoamHttpResponseFn)(LoamHttpClient *context, const LoamHttpResponse *response);

typedef void (*LoamHttpSendFn)(const LoamHttpClient *context, const LoamHttpRequest *request, LoamHttpResponseFn callback);

/**
 * Creates a new opaque `LoamClient` reference.
 *
 * The configuration provided must include at least one realm.
 *
 * The `auth_token` represents the authority to act as a particular user
 * and should be valid for the lifetime of the `LoamClient`.
 *
 * The function pointer `http_send` will be called when the client wishes
 * to make a network request. The appropriate request should be executed
 * by you, and the the response provided to the response function pointer.
 */
LoamClient *loam_client_create(LoamConfiguration configuration,
                               LoamAuthToken auth_token,
                               LoamHttpSendFn http_send,
                               LoamClientCreateError *error);

void loam_client_destroy(LoamClient *client);

/**
 * Stores a new PIN-protected secret.
 *
 * If it's successful, this also deletes any prior secrets for this user.
 *
 * # Warning
 *
 * If the secrets vary in length (such as passwords), the caller should
 * add padding to obscure the secrets' length.
 */
void loam_client_register(LoamClient *client,
                          const void *context,
                          LoamUnmanagedDataBuffer pin,
                          LoamUnmanagedDataBuffer secret,
                          uint16_t num_guesses,
                          void (*response)(const void *context, const LoamRegisterError *error));

/**
 * Retrieves a PIN-protected secret.
 *
 * If it's successful, this also deletes any earlier secrets for this
 * user.
 */
void loam_client_recover(LoamClient *client,
                         const void *context,
                         LoamUnmanagedDataBuffer pin,
                         void (*response)(const void *context, LoamUnmanagedDataBuffer secret, const LoamRecoverError *error));

/**
 * Deletes all secrets for this user.
 *
 * Note: This does not delete the user's audit log.
 */
void loam_client_delete_all(LoamClient *client,
                            const void *context,
                            void (*response)(const void *context, const LoamDeleteError *error));

#endif /* LOAM_FFI_H_ */
